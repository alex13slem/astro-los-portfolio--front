---
// Supports weights 100-700
import '@fontsource-variable/roboto-mono';
import '@fontsource/exo-2';
import '@fontsource/exo-2/700.css';
import '../styles/index.scss';
import SiteHeader from './SiteHeader.astro';
import MobileMenu from '../components/MobileMenu/index.tsx';

const {
  title,
  description = `
  Александр Щерба (alex13slem) - веб-разработчик. 
  Создаю быстрые и удобные сайты, адаптивные пользовательские интерфейсы, 
  грамотный современный frontend по методологии JAM-stack. 
  Работаю с технологиями React, Svelte, Astro, Strapi, Decap, Netlify, Vercel
  `,
} = Astro.props;
---

<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <meta name="generator" content="{Astro.generator}" />
    <title>{title}</title>
  </head>
  <body>
    <SiteHeader />
    <slot />
    <MobileMenu client:load />
  </body>
</html>

<style>
  body {
    display: flex;
    flex-direction: column;
    min-height: 100svh;
  }
</style>

<script>
  import { locationHash } from '../store/location';

  locationHash.set(location.hash);
  window.addEventListener('hashchange', () => {
    locationHash.set(location.hash);
  });

  const sectionsH2 = document.querySelectorAll('section h2');

  const setSectionHash: IntersectionObserverCallback = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const section = entry.target.closest('section');
        const hash = section?.id ? '#' + section.id : '#';
        history.replaceState({}, '', hash);
        locationHash.set(hash);
      }
    });
  };

  const observer = new IntersectionObserver(setSectionHash, {
    threshold: 1,
    rootMargin: '0px 0px -200px 0px',
  });

  sectionsH2.forEach((h2) => observer.observe(h2));
</script>
